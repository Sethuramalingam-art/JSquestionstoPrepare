// fetch cancel method
 useEffect(() => {
    const controller = new AbortController(); // cancel the request
    const signal = controller.signal;
    let isCanceled = false; // we can able to cancel the state update
    const fetchProducts = async () => {
        try{
            const response = await fetch(
                "https://jsonplaceholder.typicode.com/users",
                { signal }
              );
              const result = await response.json();
              if (!isCanceled) {
                setUsers(result);
              }
        } catch(err) {
            if(err.name="AbortError") {

            }
        }
      
    };
    fetchProducts();
    return () => {
      controller.abort();
      isCanceled = true;
    };
  }, []);


/// Axios get method cancel 

 useEffect(() => {
    const cancelToken = Axios.CancelToken.source()
    let isCanceled = false; // we can able to cancel the state update
    const fetchProducts = async () => {
        try{
            const response = await axios.get(
                "https://jsonplaceholder.typicode.com/users",
                { cancelToken:cancelToken.token }
              );
              const result = await response.json();
              if (!isCanceled) {
                setUsers(result);
              }
        } catch(err) {
            if(axios.isCancel(err)) {

            }
        }
      
    };
    fetchProducts();
    return () => {
      cancelToken.cancel();
      isCanceled = true;
    };
  }, []);